# Checking the satyr. -*- Autotest -*-

AT_BANNER([JavaScript stacktrace])

AT_TESTFUN([sr_js_stacktrace_parse],
[[
#include "js/stacktrace.h"
#include "js/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

void
check(char *filename, char *exc_name, unsigned frame_count, struct sr_js_frame *top_frame, struct sr_js_frame *second_frame, struct sr_js_frame *bottom_frame)
{
  char *error_message = NULL;
  const char *file_contents = sr_file_to_string(filename, &error_message);
  const char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);

  struct sr_js_stacktrace *stacktrace = sr_js_stacktrace_parse(&input, &location);
  assert(stacktrace);
  assert(*input == '\0');
  assert(0 == strcmp(stacktrace->exception_name, exc_name));

  struct sr_js_frame *frame = stacktrace->frames;
  int i = 0;
  while (frame)
  {
    if (i==0 && top_frame)
    {
      assert(sr_js_frame_cmp(frame, top_frame) == 0);
    }
    else if (i == 1 && second_frame)
    {
      assert(sr_js_frame_cmp(frame, second_frame) == 0);
    }

    frame = frame->next;
    i++;
  }

  assert(i == frame_count);
  if (frame && bottom_frame)
  {
    assert(sr_js_frame_cmp(frame, bottom_frame) == 0);
  }

  sr_js_stacktrace_free(stacktrace);
  free(file_contents);
}

int
main(void)
{
  struct sr_js_frame top = {
    .type = SR_REPORT_JAVASCRIPT,
    .file_name = "/home/jfilak/repos/abrt-js/testapp/index.js",
    .file_line = 2,
    .line_colum = 1,
  };
  struct sr_js_frame second = {
    .type = SR_REPORT_JAVASCRIPT,
    .file_name = "/usr/share/js/vendor_js/will_crash.rb",
    .file_line = 10,
    .line_column = ,
    .function_name = "main",
  };
  struct sr_js_frame bottom = {
    .type = SR_REPORT_JAVASCRIPT,
    .file_name = "/usr/bin/will_js_raise",
    .file_line = 8,
    .line_column = ,
    .function_name = "main",
  };
  check("../../js_stacktraces/node-01", "ReferenceError", 21, &top, &second, &bottom);

  check("../../js_stacktraces/node-02", "RuntimeError", 4, NULL, NULL, NULL);

  return 0;
}
]])

AT_TESTFUN([sr_js_stacktrace_dup],
[[
#include "js/stacktrace.h"
#include "js/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

void
check(char *filename)
{
  char *error_message = NULL;
  const char *file_contents = sr_file_to_string(filename, &error_message);
  const char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);

  struct sr_js_stacktrace *stacktrace1 = sr_js_stacktrace_parse(&input, &location);
  struct sr_js_stacktrace *stacktrace2 = sr_js_stacktrace_dup(stacktrace1);

  assert(stacktrace1 != stacktrace2);
  printf("%s == %s\n", stacktrace1->exception_name, stacktrace2->exception_name);
  assert(0 == strcmp(stacktrace1->exception_name, stacktrace2->exception_name));

  struct sr_js_frame *f1 = stacktrace1->frames;
  struct sr_js_frame *f2 = stacktrace2->frames;

  while (f1 && f2)
  {
    assert(0 == sr_js_frame_cmp(f1, f2));
    f1 = f1->next;
    f2 = f2->next;
  }
  assert(f1 == NULL);
  assert(f2 == NULL);

  sr_js_stacktrace_free(stacktrace1);
  sr_js_stacktrace_free(stacktrace2);
  free(file_contents);
}

int
main(void)
{
  check("../../js_stacktraces/node-01");
  check("../../js_stacktraces/node-02");

  return 0;
}
]])

AT_TESTFUN([sr_js_stacktrace_get_reason],
[[
#include "js/stacktrace.h"
#include "js/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

int
main(void)
{
  char *error_message = NULL;
  const char *file_contents = sr_file_to_string("../../js_stacktraces/node-01", &error_message);
  const char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);
  struct sr_js_stacktrace *stacktrace1 = sr_js_stacktrace_parse(&input, &location);

  char *reason = sr_js_stacktrace_get_reason(stacktrace1);
  char *expected = "ReferenceError in ";
  assert(0 == strcmp(reason, expected));

  sr_js_stacktrace_free(stacktrace1);
  free(file_contents);

  return 0;
}
]])

AT_TESTFUN([sr_js_stacktrace_to_json],
[[
#include "js/stacktrace.h"
#include "js/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

void
check(char *filename, char *json_filename)
{
  char *error_message = NULL;
  const char *file_contents = sr_file_to_string(filename, &error_message);
  const char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);

  struct sr_js_stacktrace *stacktrace1 = sr_js_stacktrace_parse(&input, &location);

  char *expected = sr_file_to_string(json_filename, &error_message);
  char *json = sr_js_stacktrace_to_json(stacktrace1);

  assert(0 == strcmp(json, expected));

  sr_js_stacktrace_free(stacktrace1);
  free(json);
  free(file_contents);
}

int
main(void)
{
  check("../../js_stacktraces/node-01", "../../js_stacktraces/node-01-expected-json");
  check("../../js_stacktraces/node-02", "../../js_stacktraces/node-02-expected-json");

  return 0;
}
]])

AT_TESTFUN([sr_js_stacktrace_from_json],
[[
#include "stacktrace.h"
#include "js/stacktrace.h"
#include "js/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

void
check(char *filename)
{
  char *error_message = NULL;
  char *file_contents = sr_file_to_string(filename, &error_message);
  char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);

  struct sr_js_stacktrace *stacktrace1 = sr_js_stacktrace_parse(&input, &location);

  char *json = sr_js_stacktrace_to_json(stacktrace1);
  struct sr_js_stacktrace *stacktrace2 = sr_stacktrace_from_json_text(SR_REPORT_JAVASCRIPT, json, &error_message);

  assert(0 == strcmp(stacktrace1->exception_name, stacktrace2->exception_name));

  struct sr_js_frame *f1 = stacktrace1->frames;
  struct sr_js_frame *f2 = stacktrace2->frames;

  while (f1 && f2)
  {
    assert(0 == sr_js_frame_cmp(f1, f2));
    f1 = f1->next;
    f2 = f2->next;
  }
  assert(f1 == NULL);
  assert(f2 == NULL);

  sr_js_stacktrace_free(stacktrace1);
  sr_js_stacktrace_free(stacktrace2);
  free(json);
  free(file_contents);
}

int
main(void)
{
  check("../../js_stacktraces/node-01");

  return 0;
}
]])
