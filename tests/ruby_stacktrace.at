# Checking the satyr. -*- Autotest -*-

AT_BANNER([Ruby stacktrace])

AT_TESTFUN([sr_ruby_stacktrace_parse],
[[
#include "ruby/stacktrace.h"
#include "ruby/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

void
check(char *filename, char *exc_name, unsigned frame_count, struct sr_ruby_frame *top_frame, struct sr_ruby_frame *second_frame, struct sr_ruby_frame *bottom_frame)
{
  char *error_message = NULL;
  const char *file_contents = sr_file_to_string(filename, &error_message);
  const char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);

  struct sr_ruby_stacktrace *stacktrace = sr_ruby_stacktrace_parse(&input, &location);
  assert(stacktrace);
  assert(*input == '\0');
  assert(0 == strcmp(stacktrace->exception_name, exc_name));

  struct sr_ruby_frame *frame = stacktrace->frames;
  int i = 0;
  while (frame)
  {
    if (i==0 && top_frame)
    {
      assert(sr_ruby_frame_cmp(frame, top_frame) == 0);
    }
    else if (i == 1 && second_frame)
    {
      assert(sr_ruby_frame_cmp(frame, second_frame) == 0);
    }

    frame = frame->next;
    i++;
  }

  assert(i == frame_count);
  if (frame && bottom_frame)
  {
    assert(sr_ruby_frame_cmp(frame, bottom_frame) == 0);
  }

  sr_ruby_stacktrace_free(stacktrace);
  free(file_contents);
}

int
main(void)
{
  struct sr_ruby_frame top = {
    .type = SR_REPORT_RUBY,
    .file_name = "/usr/share/ruby/vendor_ruby/will_crash.rb",
    .file_line = 13,
    .special_function = false,
    .function_name = "func",
    .block_level = 2,
    .rescue_level = 1
  };
  struct sr_ruby_frame second = {
    .type = SR_REPORT_RUBY,
    .file_name = "/usr/share/ruby/vendor_ruby/will_crash.rb",
    .file_line = 10,
    .special_function = false,
    .function_name = "func",
    .block_level = 2,
    .rescue_level = 0
  };
  struct sr_ruby_frame bottom = {
    .type = SR_REPORT_RUBY,
    .file_name = "/usr/bin/will_ruby_raise",
    .file_line = 8,
    .special_function = true,
    .function_name = "main",
    .block_level = 0,
    .rescue_level = 0
  };
  check("../../ruby_stacktraces/ruby-01", "Wrap::MyException", 21, &top, &second, &bottom);

  struct sr_ruby_frame top2 = {
    .type = SR_REPORT_RUBY,
    .file_name = "/usr/share/gems/gems/rdoc-4.1.1/lib/rdoc/class_module.rb",
    .file_line = 173,
    .special_function = false,
    .function_name = "aref_prefix",
    .block_level = 0,
    .rescue_level = 0
  };
  struct sr_ruby_frame second2 = {
    .type = SR_REPORT_RUBY,
    .file_name = "/usr/share/gems/gems/rdoc-4.1.1/lib/rdoc/class_module.rb",
    .file_line = 181,
    .special_function = false,
    .function_name = "aref",
    .block_level = 0,
    .rescue_level = 0
  };
  check("../../ruby_stacktraces/ruby-02", "NotImplementedError", 37, &top2, &second2, NULL);

  check("../../ruby_stacktraces/ruby-03", "RuntimeError", 4, NULL, NULL, NULL);

  struct sr_ruby_frame top4 = {
    .type = SR_REPORT_RUBY,
    .file_name = "/usr/share/rubygems/rubygems/basic_specification.rb",
    .file_line = 50,
    .special_function = false,
    .function_name = "contains_requirable_file?",
    .block_level = 3,
    .rescue_level = 0
  };
  struct sr_ruby_frame second4 = {
    .type = SR_REPORT_RUBY,
    .file_name = "/usr/share/rubygems/rubygems/basic_specification.rb",
    .file_line = 50,
    .special_function = false,
    .function_name = "each",
    .block_level = 0,
    .rescue_level = 0
  };
  check("../../ruby_stacktraces/ruby-04", "SignalException", 39, &top4, &second4, NULL);

  return 0;
}
]])

AT_TESTFUN([sr_ruby_stacktrace_dup],
[[
#include "ruby/stacktrace.h"
#include "ruby/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

void
check(char *filename)
{
  char *error_message = NULL;
  const char *file_contents = sr_file_to_string(filename, &error_message);
  const char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);

  struct sr_ruby_stacktrace *stacktrace1 = sr_ruby_stacktrace_parse(&input, &location);
  struct sr_ruby_stacktrace *stacktrace2 = sr_ruby_stacktrace_dup(stacktrace1);

  assert(stacktrace1 != stacktrace2);
  printf("%s == %s\n", stacktrace1->exception_name, stacktrace2->exception_name);
  assert(0 == strcmp(stacktrace1->exception_name, stacktrace2->exception_name));

  struct sr_ruby_frame *f1 = stacktrace1->frames;
  struct sr_ruby_frame *f2 = stacktrace2->frames;

  while (f1 && f2)
  {
    assert(0 == sr_ruby_frame_cmp(f1, f2));
    f1 = f1->next;
    f2 = f2->next;
  }
  assert(f1 == NULL);
  assert(f2 == NULL);

  sr_ruby_stacktrace_free(stacktrace1);
  sr_ruby_stacktrace_free(stacktrace2);
  free(file_contents);
}

int
main(void)
{
  check("../../ruby_stacktraces/ruby-01");
  check("../../ruby_stacktraces/ruby-02");
  check("../../ruby_stacktraces/ruby-03");
  check("../../ruby_stacktraces/ruby-04");

  return 0;
}
]])

AT_TESTFUN([sr_ruby_stacktrace_get_reason],
[[
#include "ruby/stacktrace.h"
#include "ruby/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

int
main(void)
{
  char *error_message = NULL;
  const char *file_contents = sr_file_to_string("../../ruby_stacktraces/ruby-03", &error_message);
  const char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);
  struct sr_ruby_stacktrace *stacktrace1 = sr_ruby_stacktrace_parse(&input, &location);

  char *reason = sr_ruby_stacktrace_get_reason(stacktrace1);
  char *expected = "RuntimeError in /usr/share/gems/gems/openshift-origin-node-1.18.0.1/lib/openshift-origin-node/utils/tc.rb:103";
  assert(0 == strcmp(reason, expected));

  sr_ruby_stacktrace_free(stacktrace1);
  free(file_contents);

  return 0;
}
]])

AT_TESTFUN([sr_ruby_stacktrace_to_json],
[[
#include "ruby/stacktrace.h"
#include "ruby/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

void
check(char *filename, char *json_filename)
{
  char *error_message = NULL;
  const char *file_contents = sr_file_to_string(filename, &error_message);
  const char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);

  struct sr_ruby_stacktrace *stacktrace1 = sr_ruby_stacktrace_parse(&input, &location);

  char *expected = sr_file_to_string(json_filename, &error_message);
  char *json = sr_ruby_stacktrace_to_json(stacktrace1);

  assert(0 == strcmp(json, expected));

  sr_ruby_stacktrace_free(stacktrace1);
  free(json);
  free(file_contents);
}

int
main(void)
{
  check("../../ruby_stacktraces/ruby-01", "../../ruby_stacktraces/ruby-01-expected-json");
  check("../../ruby_stacktraces/ruby-02", "../../ruby_stacktraces/ruby-02-expected-json");
  check("../../ruby_stacktraces/ruby-03", "../../ruby_stacktraces/ruby-03-expected-json");
  check("../../ruby_stacktraces/ruby-04", "../../ruby_stacktraces/ruby-04-expected-json");

  return 0;
}
]])

AT_TESTFUN([sr_ruby_stacktrace_from_json],
[[
#include "stacktrace.h"
#include "ruby/stacktrace.h"
#include "ruby/frame.h"
#include "utils.h"
#include "location.h"
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

void
check(char *filename)
{
  char *error_message = NULL;
  char *file_contents = sr_file_to_string(filename, &error_message);
  char *input = file_contents;
  struct sr_location location;
  sr_location_init(&location);

  struct sr_ruby_stacktrace *stacktrace1 = sr_ruby_stacktrace_parse(&input, &location);

  char *json = sr_ruby_stacktrace_to_json(stacktrace1);
  struct sr_ruby_stacktrace *stacktrace2 = sr_stacktrace_from_json_text(SR_REPORT_RUBY, json, &error_message);

  assert(0 == strcmp(stacktrace1->exception_name, stacktrace2->exception_name));

  struct sr_ruby_frame *f1 = stacktrace1->frames;
  struct sr_ruby_frame *f2 = stacktrace2->frames;

  while (f1 && f2)
  {
    assert(0 == sr_ruby_frame_cmp(f1, f2));
    f1 = f1->next;
    f2 = f2->next;
  }
  assert(f1 == NULL);
  assert(f2 == NULL);

  sr_ruby_stacktrace_free(stacktrace1);
  sr_ruby_stacktrace_free(stacktrace2);
  free(json);
  free(file_contents);
}

int
main(void)
{
  check("../../ruby_stacktraces/ruby-01");
  check("../../ruby_stacktraces/ruby-02");
  check("../../ruby_stacktraces/ruby-03");
  check("../../ruby_stacktraces/ruby-04");

  return 0;
}
]])
